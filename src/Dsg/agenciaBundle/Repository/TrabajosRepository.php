<?php

namespace Dsg\agenciaBundle\Repository;

use Dsg\agenciaBundle\Entity\Trabajos;
use Doctrine\ORM\EntityRepository;

/**
 * TrabajosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TrabajosRepository extends EntityRepository
{
    public function getTrabajosActivos($categoria_id = null, $max = null, $offset = null, $afiliado_id = null)
  {
    $qb = $this->createQueryBuilder('j')
                ->where('j.finaliza > :date')
                ->setParameter('date', date('Y-m-d H:i:s', time()))
                ->andWhere('j.activado = :activado')
                ->setParameter('activado', 1)
                ->orderBy('j.finaliza', 'DESC');
 
    if($max) {
        $qb->setMaxResults($max);
    }
    
    if($offset)
    {
        $qb->setFirstResult($offset);
    }
    
    if($categoria_id)
    {
      $qb->andWhere('j.categoria = :categoria_id')
         ->setParameter('categoria_id', $categoria_id);
    }
    
    if($afiliado_id) {
        $qb->leftJoin('j.categoria', 'c')
            ->leftJoin('c.afiliados', 'a')
            ->andWhere('a.id = :afiliado_id')
            ->setParameter('afiliado_id', $afiliado_id);
   }
    
    $query = $qb->getQuery();
 
    return $query->getResult();
  }
  
  
  
  public function countTrabajosActivos($categoria_id = null)
    {
        $qb = $this->createQueryBuilder('j')
                    ->select('count(j.id)')
                    ->where('j.finaliza > :date')
                    ->setParameter('date', date('Y-m-d H:i:s', time()))
                    ->andWhere('j.activado = :activado')
                    ->setParameter('activado', 1);
                   ;

        if ($categoria_id) {
            $qb->andWhere('j.categoria = :categoria_id')
               ->setParameter('categoria_id', $categoria_id);
        }

        $query = $qb->getQuery();

        return $query->getSingleScalarResult();
    }
    
    
    
    
    //Si el trabajo no esta activo mandamos a una pÃ¡gina 404
    public function getTrabajoActivo($id)
    {
        $query = $this->createQueryBuilder('j')
            ->where('j.id = :id')
            ->setParameter('id', $id)
            ->andWhere('j.finaliza > :date')
            ->setParameter('date', date('Y-m-d H:i:s', time()))
            ->andWhere('j.activado = :activado')
            ->setParameter('activado', 1)
            ->setMaxResults(1)
            ->getQuery();
 
        try {
            $trabajo = $query->getSingleResult();
        } catch (\Doctrine\Orm\NoResultException $e) {
            $trabajo = null;
        }
 
        return $trabajo;
    }
    
    public function limpieza($days)
    {
        $query = $this->createQueryBuilder('j')
            ->delete()
            ->where('j.activado IS NULL')
            ->andWhere('j.creado < :creado')    
            ->setParameter('creado',  date('Y-m-d', time() - 86400 * $days))
            ->getQuery();
     
        return $query->execute();
    }
    
    public function getForLuceneQuery($query)
    {
        $hits = Trabajos::getLuceneIndex()->find($query);
 
        $pks = array();
        foreach ($hits as $hit)
        {
          $pks[] = $hit->pk;
        }
 
        if (empty($pks))
        {
          return array();
        }
 
        $q = $this->createQueryBuilder('j')
            ->where('j.id IN (:pks)')
            ->setParameter('pks', $pks)
            ->andWhere('j.activado = :activado')
            ->setParameter('activado', 1)
            ->setMaxResults(20)
            ->getQuery();
 
        return $q->getResult();
    }
}
